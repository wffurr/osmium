#!/usr/bin/env php
<?php
/* Osmium
 * Copyright (C) 2012, 2013, 2014, 2015 Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

require __DIR__.'/../inc/root.php';

$static = array();

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT tsd.typeid, typename, category, subcategory, tsd.metagroupid, groupname, other, mt.parenttypeid,
	mg0.marketgroupid AS mgid0, mg0.marketgroupname AS mgname0,
	mg1.marketgroupid AS mgid1, mg1.marketgroupname AS mgname1,
	mg2.marketgroupid AS mgid2, mg2.marketgroupname AS mgname2,
	mg3.marketgroupid AS mgid3, mg3.marketgroupname AS mgname3,
	mg4.marketgroupid AS mgid4, mg4.marketgroupname AS mgname4,
	ml.value::integer AS metalevel
	FROM osmium.typessearchdata tsd
	LEFT JOIN eve.invmarketgroups mg0 ON mg0.marketgroupid = tsd.marketgroupid
	LEFT JOIN eve.invmarketgroups mg1 ON mg1.marketgroupid = mg0.parentgroupid
	LEFT JOIN eve.invmarketgroups mg2 ON mg2.marketgroupid = mg1.parentgroupid
	LEFT JOIN eve.invmarketgroups mg3 ON mg3.marketgroupid = mg2.parentgroupid
	LEFT JOIN eve.invmarketgroups mg4 ON mg4.marketgroupid = mg3.parentgroupid
	LEFT JOIN eve.invmetatypes mt ON mt.typeid = tsd.typeid
	LEFT JOIN eve.dgmtypeattribs ml ON ml.typeid = tsd.typeid AND ml.attributeid = 633
	ORDER BY mgname4, mgname3, mgname2, mgname1, mgname0, category, metagroupid, typename'
	);

$flatgroups = array(
	'root' => array('children' => array()),
	'types' => array(),
);

/* <XXX> */
function get_fake_mgid($mgname) {
	static $i = 0;
	static $map = [];

	if(isset($map[$mgname])) return $map[$mgname];
	return $map[$mgname] = --$i;
}
/* </XXX> */

while($row = \Osmium\Db\fetch_assoc($q)) {
	/* <XXX> */
	if($row['groupname'] === 'Effect Beacon') {
		/* If the database ever gets "fixed", this will let us know. */
		assert($row['mgid0'] === null);
		
		if(preg_match('%^(?<prefix>.+)( Effect)? Beacon Class [1-6]$%U', $row['typename'], $match)
		   || preg_match('%^(?<prefix>(Drifter )?Incursion) %U', $row['typename'], $match)) {
			$row['mgid0'] = get_fake_mgid($match['prefix']);
			$row['mgname0'] = $match['prefix'];
		} else {
			$name = 'Uncategorized';
			$row['mgid0'] = get_fake_mgid($name);
			$row['mgname0'] = $name;
		}

		$row['mgid1'] = get_fake_mgid('Effect Beacons');
		$row['mgname1'] = 'Effect Beacons';
	}
	/* </XXX> */
	
	for($i = 1; $i <= 4; ++$i) {
		if($row['mgid'.$i] === null) {
			if(($root = $row['mgid'.($i - 1)]) !== null) {
				if(!in_array($root, $flatgroups['root']['children'])) {
					$flatgroups['root']['children'][] = (int)$root;
				}
			}

			break;
		}

		$parent = (int)$row['mgid'.$i];
		$child = (int)$row['mgid'.($i - 1)];

		if(!isset($flatgroups[$parent])) {
			$flatgroups[$parent] = array(
				'name' => $row['mgname'.$i],
				'children' => array(),
				);
		}

		if(!in_array($child, $flatgroups[$parent]['children'])) {
			$flatgroups[$parent]['children'][] = $child;
		}
	}

	$mgid = $row['mgid0'] === null ? 0 : (int)$row['mgid0'];
	$mgname = $mgid === 0 ? 'Uncategorized Types' : $row['mgname0'];

	if(!isset($flatgroups[$mgid]['name'])) {
		$flatgroups[$mgid] = array(
			'name' => $mgname,
			'children' => array(),
			);
	}

	$flatgroups[$mgid]['types'][] = (int)$row['typeid'];
	dogma_type_has_projectable_effects((int)$row['typeid'], $projectable);

	$flatgroups['types'][(int)$row['typeid']] = array(
		(int)$row['typeid'],
		$row['typename'],
		$row['category'],
		$row['subcategory'],
		(int)$row['metagroupid'],
		$row['groupname'],
		$row['other'],
		(int)$row['parenttypeid'],
		(int)$projectable,
		$mgid,
		(int)$row['metalevel'], /* Will be popped after sorting */
	);
}

$flatgroups['root']['children'][] = 0;

foreach($flatgroups as $k => $g) {
	if(isset($g['children'])) {
		usort($flatgroups[$k]['children'], function($x, $y) use($flatgroups) {
			return strnatcmp($flatgroups[$x]['name'], $flatgroups[$y]['name']);
		});
	}
	if(isset($g['types'])) {
		$maxmetalevels = array();

		foreach($g['types'] as $t) {
			$t = $flatgroups['types'][$t];

			if(!isset($maxmetalevels[$t[4]])
			   || $maxmetalevels[$t[4]] < $t[10]) {
				$maxmetalevels[$t[4]] = $t[10];
			}
		}

		usort($flatgroups[$k]['types'], function($x, $y) use($flatgroups, $maxmetalevels) {
			$x = $flatgroups['types'][$x];
			$y = $flatgroups['types'][$y];

			/* First sort by the name of the parent type */
			$ret = strnatcmp($flatgroups['types'][$x[7] ?: $x[0]][1], $flatgroups['types'][$y[7] ?: $y[0]][1]);
			if($ret !== 0) return $ret;

			/* Then sort the variations of the same type by meta group */
			if($x[4] !== $y[4]) {
				$ret = $maxmetalevels[$x[4]] - $maxmetalevels[$y[4]];
				if($ret !== 0) return $ret;
				return $y[4] - $x[4];
			}

			/* Then sort the meta groups by meta level */
			$ret = $x[10] - $y[10];
			if($ret !== 0) return $ret;

			/* Finally, sort by name */
			return strnatcmp($x[1], $y[1]);
		});
	}
}

foreach($flatgroups['types'] as &$t) {
	array_pop($t); /* Get rid of meta level */
}

foreach($flatgroups as $id => $g) {
	if(!isset($g['children'])) continue;
	foreach($g['children'] as $c) {
		if(isset($flatgroups[$c]) && !isset($flatgroups[$c]['parent'])) {
			$flatgroups[$c]['parent'] = $id;
		}
	}
}

$static['groups'] = $flatgroups;

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT moduleid, chargeid FROM osmium.invcharges ic
	JOIN eve.invtypes it ON it.typeid = ic.chargeid AND it.published = true
	ORDER BY moduleid ASC, chargeid ASC'
	);

while($row = \Osmium\Db\fetch_assoc($q)) {
	$static['charges'][$row['moduleid']][] = (int)$row['chargeid'];
}

foreach($static['charges'] as $k => $a) {
	usort($static['charges'][$k], function($x, $y) use($flatgroups) {
		return strnatcmp($flatgroups['types'][$x][1], $flatgroups['types'][$y][1]);
	});
}

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT metagroupid, metagroupname FROM osmium.invmetagroups
	ORDER BY metagroupname ASC'
);

while($row = \Osmium\Db\fetch_row($q)) {
	$static['metagroups'][$row[0]] = $row[1];
}

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT typeid, offlinable, onlinable, activable, overloadable
	FROM osmium.invmodulestates
	ORDER BY typeid ASC'
);

while($row = \Osmium\Db\fetch_row($q)) {
	$static['modulestates'][$row[0]] = array(
		(int)($row[1] === 't'),
		(int)($row[2] === 't'),
		(int)($row[3] === 't'),
		(int)($row[4] === 't'),
		);
}

/* ---------------------------------------------------------- */

/** CLF state name => [Pretty name, Sprite position]
 * Order must be consistent with $static['modulestates']
 *
 * @see \Osmium\Fit\get_state_names() */
foreach(\Osmium\Fit\get_state_names() as $state) {
	$static['modulestatenames'][$state[2]] = [ $state[0], $state[1] ];
}

/* ---------------------------------------------------------- */

$static['slottypes'] = \Osmium\Fit\get_slottypes();

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT typeid, highslots, medslots, lowslots, rigslots, subsystemslots
	FROM osmium.invshipslots
	ORDER BY typeid ASC'
);

while($row = \Osmium\Db\fetch_row($q)) {
	$static['shipslots'][$row[0]] = array(
		(int)$row[1],
		(int)$row[2],
		(int)$row[3],
		(int)$row[4],
		(int)$row[5],
		);
}

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT DISTINCT chargeid,
	(COALESCE(em.value, 0) + COALESCE(explosive.value, 0)
	+ COALESCE(kinetic.value, 0) + COALESCE(thermal.value, 0)) AS dmg
	FROM osmium.invcharges
	LEFT JOIN eve.dgmtypeattribs em ON em.typeid = chargeid AND em.attributeid = 114
	LEFT JOIN eve.dgmtypeattribs explosive ON explosive.typeid = chargeid AND explosive.attributeid = 116
	LEFT JOIN eve.dgmtypeattribs kinetic ON kinetic.typeid = chargeid AND kinetic.attributeid = 117
	LEFT JOIN eve.dgmtypeattribs thermal ON thermal.typeid = chargeid AND thermal.attributeid = 118
	ORDER BY chargeid ASC'
);

while($row = \Osmium\Db\fetch_row($q)) {
	if($row[1] == 0) continue;
	$static['chargedmg'][$row[0]] = (double)$row[1];
}

/* ---------------------------------------------------------- */

const GROUP_AssaultFrigate = 324;
const GROUP_AttackBC = 1201;
const GROUP_Battleship = 27;
const GROUP_Carrier = 547;
const GROUP_CombatBC = 419;
const GROUP_Cruiser = 26;
const GROUP_Frigate = 25;
const GROUP_HAC = 358;
const GROUP_Industrial = 28;
const GROUP_Interceptor = 831;
const GROUP_Titan = 30;

$groups = array(
	'Interceptor' => [ [ GROUP_Interceptor ], true, true, null ],
	'Frigate' => [ [ GROUP_Frigate, GROUP_AssaultFrigate ], true, true, null ],
	'Frigate+MWD' => [ [ GROUP_Frigate, GROUP_AssaultFrigate ], true, false, function($ctx) {
			dogma_add_module_s($ctx, \Osmium\Fit\TYPE_1MNMicrowarpdriveII, $key, DOGMA_STATE_Active);
		} ],
	'Cruiser' => [ [ GROUP_Cruiser, GROUP_HAC ], true, true, null ],
	'Cruiser+MWD' => [ [ GROUP_Cruiser, GROUP_HAC ], true, false, function($ctx) {
			dogma_add_module_s($ctx, \Osmium\Fit\TYPE_10MNMicrowarpdriveII, $key, DOGMA_STATE_Active);
		} ],
	'Industrial' => [ [ GROUP_Industrial ], true, true, null ],
	'Battlecruiser' => [ [ GROUP_CombatBC, GROUP_AttackBC ], true, true, null ],
	'Battlecruiser+MWD' => [ [ GROUP_CombatBC, GROUP_AttackBC ], true, false, function($ctx) {
			dogma_add_module_s($ctx, \Osmium\Fit\TYPE_10MNMicrowarpdriveII, $key, DOGMA_STATE_Active);
		} ],
	'Battleship' => [ [ GROUP_Battleship ], true, true, null ],
	'Battleship+MWD' => [ [ GROUP_Battleship ], true, false, function($ctx) {
			dogma_add_module_s($ctx, \Osmium\Fit\TYPE_100MNMicrowarpdriveII, $key, DOGMA_STATE_Active);
		} ],
	'Carrier' => [ [ GROUP_Carrier ], true, true, null ],
	'Titan' => [ [ GROUP_Titan ], true, true, null ],
);
foreach($groups as $g => $d) {
	list($gnames, $istargetee, $istargeter, $beforehook) = $d;

	$c = 0;
	$signatureradius = 0;
	$scanresolution = 0;

	dogma_init_context($ctx);
	if($beforehook !== null) $beforehook($ctx);

	foreach($gnames as $gname) {
		$q = \Osmium\Db\query_params(
			'SELECT typeid FROM osmium.invships
			WHERE groupid = $1',
			array($gname)
		);

		while($row = \Osmium\Db\fetch_row($q)) {
			dogma_set_ship($ctx, $row[0]);
			dogma_get_ship_attribute($ctx, \Osmium\Fit\ATT_ScanResolution, $scan);
			dogma_get_ship_attribute($ctx, \Osmium\Fit\ATT_SignatureRadius, $sig);

			$signatureradius += $sig;
			$scanresolution += $scan;
			++$c;
		}
	}

	if($c !== 0) {
		$static['targetclass'][] = array(
			$g, $istargetee, $istargeter,
			$signatureradius / $c, $scanresolution / $c,
		);
	}
}

/* ---------------------------------------------------------- */

/* Damage values should be positive and add up to 1.0, they are sorted
 * by alphabetical order: EM, Explosive, Kinetic, Thermal */
$static['dmgprofiles'] = array(
	'Generic' => array(
		'Uniform' => [ .25, .25, .25, .25 ],
		'EM' => [ 1.0, .0, .0, .0, [ 7, 29, 32, 32 ] ],
		'Explosive' => [ .0, 1.0, .0, .0, [ 6, 29, 32, 32 ] ],
		'Kinetic' => [ .0, .0, 1.0, .0, [ 5, 29, 32, 32 ] ],
		'Thermal' => [ .0, .0, .0, 1.0, [ 4, 29, 32, 32 ] ]
	),
	/* Data "stolen" from http://wiki.eveuniversity.org/NPC_Damage_Types */
	'Factions' => array(
		/* Pirate factions */
		'Angel Cartel' => [ .07, .62, .22, .9, "//image.eveonline.com/Alliance/500011_128.png" ],
		'Blood Raiders' => [ .50, .0, .02, .48, "//image.eveonline.com/Alliance/500012_128.png" ],
		'Guristas' => [ .02, .01, .79, .18, "//image.eveonline.com/Alliance/500010_128.png" ],
		'Mordu\'s Legion' => [ .0, .0, .70, .30, "//image.eveonline.com/Alliance/500018_128.png" ],
		'Sansha\'s Nation' => [ .53, .0, .0, .47, "//image.eveonline.com/Alliance/500019_128.png" ],
		'Serpentis' => [ .0, .0, .55, .45, "//image.eveonline.com/Alliance/500020_128.png" ],

		/* Empire factions */
		'CONCORD' => [ .29, .30, .37, .32, "//image.eveonline.com/Alliance/500006_128.png" ],
		'Amarr Empire' => [ .47, .04, .07, .42, "//image.eveonline.com/Alliance/500003_128.png" ],
		'Caldari State' => [ .01, .0, .51, .48, "//image.eveonline.com/Alliance/500001_128.png" ],
		'Gallente Federation' => [ .01, .0, .60, .39, "//image.eveonline.com/Alliance/500004_128.png" ],
		'Minmatar Republic' => [ .12, .50, .31, .07, "//image.eveonline.com/Alliance/500002_128.png" ],

    /* Other factions */
    'Sleepers' => [ .14, .36, .36, .14 ],
	),
);

$ammoq = \Osmium\Db\query(
	'SELECT moduleid, groupid, ic.chargeid, it.typename,
	COALESCE(em.value, 0) AS emd, COALESCE(ex.value, 0) AS exd,
	COALESCE(ki.value, 0) AS kid, COALESCE(th.value, 0) AS thd
	FROM osmium.invcharges ic
	JOIN eve.invtypes it ON it.typeid = ic.chargeid
	LEFT JOIN eve.invmetatypes imt ON imt.typeid = ic.chargeid
	LEFT JOIN eve.dgmtypeattribs em ON em.typeid = ic.chargeid AND em.attributeid = 114
	LEFT JOIN eve.dgmtypeattribs ex ON ex.typeid = ic.chargeid AND ex.attributeid = 116
	LEFT JOIN eve.dgmtypeattribs ki ON ki.typeid = ic.chargeid AND ki.attributeid = 117
	LEFT JOIN eve.dgmtypeattribs th ON th.typeid = ic.chargeid AND th.attributeid = 118
	WHERE ic.moduleid IN (2929, 2961, 3057, 3065, 3090, 3122)
	AND (imt.parenttypeid IS NULL OR imt.metagroupid = 2)
	ORDER BY moduleid ASC, groupid ASC, it.typename ASC'
);

$basegroup = array();

while($row = \Osmium\Db\fetch_row($ammoq)) {
	list($mid, $gid, $tid, $tn, $em, $ex, $ki, $th) = $row;
	if(($s = ($em + $ex + $ki + $th)) <= 0) continue;

	$em /= $s;
	$ex /= $s;
	$ki /= $s;
	$th /= $s;

	if(!isset($basegroup[$mid])) {
		$basegroup[$mid] = \Osmium\Fit\get_groupname($gid);
	}

	$name = preg_replace('%( (S|M|L|XL))$%D', '', $tn);
	if(strpos($name, 'Civilian') !== false) continue;

	$static['dmgprofiles'][$basegroup[$mid]][$name] = [
		$em, $ex, $ki, $th,
		'//image.eveonline.com/Type/'.$tid.'_64.png'
	];
}

/* ---------------------------------------------------------- */

$sideeffectsq = \Osmium\Db\query(
	'SELECT invboosters.typeid, dgmtypeeffects.effectid, effectname
	FROM osmium.invboosters
	JOIN eve.dgmtypeeffects ON dgmtypeeffects.typeid = invboosters.typeid
	JOIN eve.dgmeffects ON dgmeffects.effectid = dgmtypeeffects.effectid
	ORDER BY invboosters.typeid ASC, effectname ASC'
);
dogma_init_context($ctx);
while($r = \Osmium\Db\fetch_row($sideeffectsq)) {
	list($typeid, $effectid, $effectname) = $r;
	dogma_add_implant($ctx, (int)$typeid, $key);

	$fittingusagechance = 0;
	dogma_get_location_effect_attributes(
		$ctx,
		[ DOGMA_LOC_Implant, "implant_index" => $key ],
		(int)$effectid,
		$dur, $tra, $dis, $ran, $fal, $fittingusagechance
	);
	if($fittingusagechance > 1e-300) {
		/* Assume side effect */
		$static['boostersideeffects'][$typeid][] = array(
			(int)$effectid, $effectname
		);
	}

	dogma_remove_implant($ctx, $key);
}

/* ---------------------------------------------------------- */

$smq = \Osmium\Db\query('SELECT typeid, typename FROM eve.invtypes WHERE groupid = 1306');
while($modifier = \Osmium\Db\fetch_row($smq)) {
	/* XXX, for obvious reasons */
	if(!preg_match('%^(?<ship>.+) (?<mode>(Defense|Propulsion|Sharpshooter) Mode)$%', $modifier[1], $match)) {
		die('Ship modifier has weird type name: '.$modifier[0].' '.$modifier[1]."\n");
	}

	$stid = \Osmium\Fit\get_typeid($match['ship']);
	if(!$stid) {
		die('Ship modifier has unknown ship: '.$modifier[0].' '.$modifier[1]."\n");
	}

	$static['modes'][(int)$stid][(int)$modifier[0]] = $match['mode'];
}

/* ---------------------------------------------------------- */

file_put_contents(__DIR__.'/../static/cache/clientdata.json', json_encode($static));
